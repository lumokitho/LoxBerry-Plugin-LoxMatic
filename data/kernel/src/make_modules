#/bin/bash

# Quick and Dirty...

if test $UID -ne 0; then
        echo "This script has to be run as root. Exiting."
        exit 1
fi

# Variables
KERNEL=$(uname -r | sed 's/[-+].*$//')

# Check for correct GIT Hash of Kernel
echo
echo "*************************************************************"
if [ -e "/boot/.firmware_revision" ]
then
	echo "OK. Found Firmware revision in /boot/.firmware_revision"
else
	echo "Could not find /boot/.firmware_revision. Please give me the GIT hash for the Firmware Revision:"
	read answer
	echo $answer > /boot/.firmware_revision
fi
echo "*************************************************************"
echo

# Prepare folders
echo
echo "*************************************************************"
echo "Prepare folders..."
echo "*************************************************************"
echo

mkdir -p ./kernel_src
rm /lib/modules/$(uname -r)/build
rm /lib/modules/$(uname -r)/source
ln -s $(pwd)/kernel_src/linux /lib/modules/$(uname -r)/build
ln -s $(pwd)/kernel_src/linux /lib/modules/$(uname -r)/source

# Download/Update rpi-source
echo
echo "*************************************************************"
echo "Download rpi-source and install..."
echo "*************************************************************"
echo
wget https://raw.githubusercontent.com/notro/rpi-source/master/rpi-source -O /usr/local/bin/rpi-source && sudo chmod +x /usr/local/bin/rpi-source 

# Download Kernel sources
echo
echo "*************************************************************"
echo "Download Kernel sources..."
echo "*************************************************************"
echo
/usr/local/bin/rpi-source -v -d ./kernel_src --nomake --delete

# Prepare Kernel Pi1
echo
echo "*************************************************************"
echo "Prepare Kernel for Pi1..."
echo "*************************************************************"
echo
cd ./kernel_src/linux
make clean
#modprobe configs
#zcat /proc/config.gz > .config
zcat ../../pi1_config.gz > .config
. .config
if [ ! $CONFIG_LOCALVERSION ]
then
	UNAME="$KERNEL+"
else
	UNAME="$KERNEL$CONFIG_LOCALVERSION"
fi
mkdir -p ../../../$UNAME
yes \n | make prepare
cd ../..

# Compile modules for Pi1 and integrate them into repo 
echo
echo "*************************************************************"
echo "Compile modules for Pi1..."
echo "*************************************************************"
echo
cd ./bcm2835_raw_uart
make clean
make
cp bcm2835_raw_uart.ko ../../$UNAME/
cd ..
cd ./eq3_char_loop
make clean
make
cp eq3_char_loop.ko ../../$UNAME/
cd ..

# Check modules
echo
echo "*************************************************************"
echo "Check modules for Pi2..."
echo "*************************************************************"
echo
echo "Current kernel version is: $(uname -r)"
echo
modinfo ../$UNAME/bcm2835_raw_uart.ko
echo
modinfo ../$UNAME/eq3_char_loop.ko

# Prepare Kernel Pi2/3
echo
echo "*************************************************************"
echo "Prepare Kernel for Pi2/3..."
echo "*************************************************************"
echo
cd ./kernel_src/linux
make clean
#modprobe configs
#zcat /proc/config.gz > .config
zcat ../../pi2_config.gz > .config
. .config
if [ ! $CONFIG_LOCALVERSION ]
then
	UNAME="$KERNEL+"
else
	UNAME="$KERNEL$CONFIG_LOCALVERSION"
fi
mkdir -p ../../../$UNAME
yes \n | make prepare
cd ../..

# Compile modules for Pi/32 and integrate them into repo 
echo
echo "*************************************************************"
echo "Compile modules for Pi2/3..."
echo "*************************************************************"
echo
cd ./bcm2835_raw_uart
make clean
make
cp bcm2835_raw_uart.ko ../../$UNAME/
cd ..
cd ./eq3_char_loop
make clean
make
cp eq3_char_loop.ko ../../$UNAME/
cd ..

# Check modules
echo
echo "*************************************************************"
echo "Check modules for Pi2/3..."
echo "*************************************************************"
echo
echo "Current kernel version is: $(uname -r)"
echo
modinfo ../$UNAME/bcm2835_raw_uart.ko
echo
modinfo ../$UNAME/eq3_char_loop.ko

# Prepare Kernel Pi4
echo
echo "*************************************************************"
echo "Prepare Kernel for Pi4..."
echo "*************************************************************"
echo
cd ./kernel_src/linux
make clean
#modprobe configs
#zcat /proc/config.gz > .config
zcat ../../pi4_config.gz > .config
. .config
if [ ! $CONFIG_LOCALVERSION ]
then
	UNAME="$KERNEL+"
else
	UNAME="$KERNEL$CONFIG_LOCALVERSION"
fi
mkdir -p ../../../$UNAME
yes \n | make prepare
cd ../..

# Compile modules for Pi4 and integrate them into repo 
echo
echo "*************************************************************"
echo "Compile modules for Pi4..."
echo "*************************************************************"
echo
cd ./bcm2835_raw_uart
make clean
make
cp bcm2835_raw_uart.ko ../../$UNAME/
cd ..
cd ./eq3_char_loop
make clean
make
cp eq3_char_loop.ko ../../$UNAME/
cd ..

# Check modules
echo
echo "*************************************************************"
echo "Check modules for Pi4..."
echo "*************************************************************"
echo
echo "Current kernel version is: $(uname -r)"
echo
modinfo ../$UNAME/bcm2835_raw_uart.ko
echo
modinfo ../$UNAME/eq3_char_loop.ko



echo
echo "Finished."

echo
echo "*************************************************************"
echo "Reset permissions..."
echo "*************************************************************"
echo
chown -R loxberry:loxberry ../../kernel/
