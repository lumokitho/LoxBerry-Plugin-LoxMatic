#!/bin/bash

PLUGINNAME=REPLACELBPPLUGINDIR

# setup default HM RF variables
HM_MODE="NORMAL"
HM_HMRF_DEV=""
HM_HMRF_DEVNODE=""
HM_HMIP_DEV=""
HM_HMIP_DEVNODE=""

# Kill existing RFD
if pgrep -f bin/rfd > /dev/null 2>&1 ; then
	pkill -f bin/rfd
	sleep 0.1
	pkill -9 -f bin/rfd
fi

# Kill existing multimacd
if pgrep -f bin/multimacd > /dev/null 2>&1 ; then
	pkill -f bin/multimacd
	sleep 0.1
	pkill -9 -f bin/multimacd
fi

# Kill existing HM2MQTT
if pgrep -f hm2mqtt/index.js > /dev/null 2>&1 ; then
        pkill -f hm2mqtt/index.js
        sleep 0.1
        pkill -9 -f hm2mqtt/index.js
fi

#
# Identify Hardware
#

# Load EQ3 / RAW UART kernel modules
modprobe bcm2835_raw_uart > /dev/null 2>&1
modprobe eq3_char_loop > /dev/null 2>&1

# load the common i2c kernel modules
if [[ -e REPLACELBCONFIGDIR/is_raspberry.cfg ]];  then
	modprobe i2c_bcm2835
fi
modprobe i2c_dev

# check for RX8130-CE RTC clock at 0x32 (Epson RX8130CE) which
# is the RPI-RF-MOD onboard RTC.
i2cget -y 1 0x32 0x32 2>/dev/null >/dev/null
if [[ $? -eq 0 ]]; then
	i2cset -y 1 0x32 0x1f 0x30 >/dev/null # turn on coldcap charging
	modprobe i2c:rx8130
	if [[ $? -eq 0 ]]; then
		HM_RTC="rx8130"
		[[ -c /dev/rtc0 ]] || echo rx8130 0x32 >/sys/class/i2c-dev/i2c-1/device/new_device
		[[ -c /dev/rtc0 ]] || echo 0x32 >/sys/class/i2c-dev/i2c-1/device/delete_device

		# we found a RX8130, thus we assume the RPI-RF-MOD to
		# be present, thus we setup the LED GPIOs to OUT
		if [[ -c /dev/rtc0 ]]; then
			# setup the LEDs to show a constant yellow light
			echo default-on >/sys/class/leds/rpi_rf_mod\:green/trigger
			echo default-on >/sys/class/leds/rpi_rf_mod\:red/trigger
			echo none >/sys/class/leds/rpi_rf_mod\:blue/trigger
		fi
	fi
fi

# until we have a proper tool to identify the
# type of the GPIO rf module we assume a RPI-RF-MOD
# as soon as we have found a rx8130 RTC clock
if [[ "${HM_RTC}" == "rx8130" ]];  then
	HM_HMRF_DEV="RPI-RF-MOD"
	HM_HMIP_DEV="RPI-RF-MOD"
else
	HM_HMRF_DEV="HM-MOD-RPI-PCB"
	HM_HMIP_DEV="HM-MOD-RPI-PCB"
fi

#
# Check here for any USB devices
#

#
# Init Hardware
#

# set default HM_HOST_GPIO_UART
if [[ -e $LBHOMEDIR/config/system/is_raspberry.cfg ]];  then
	HM_HOST_GPIO_UART="/dev/ttyAMA0"
	HM_HOST_GPIO_RESET=18  # GPIO18/GPIO.1 (pin 12)
else
	HM_HOST_GPIO_UART="/dev/ttyS0"
	HM_HOST_GPIO_RESET=""
fi

# Raw-UART Devices
if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] ||
   [[ "${HM_HMIP_DEV}" == "HM-MOD-RPI-PCB" ]] ||
   [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]] ||
   [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then
	if [[ -c /dev/raw-uart ]];  then
		HM_HMRF_DEVNODE="/dev/raw-uart"
		HM_HMIP_DEVNODE="/dev/raw-uart"
	else
		# if no raw uart device is present we try to use the
		# hardware specific tty device
		HM_HMRF_DEVNODE="${HM_HOST_GPIO_UART}"
		HM_HMIP_DEVNODE="${HM_HOST_GPIO_UART}"
	fi
fi

# also set tty device to low_latency mode (if possible)
if [[ -c "${HM_HOST_GPIO_UART}" ]]; then
	/bin/setserial ${HM_HOST_GPIO_UART} low_latency > /dev/null 2>&1
fi

# Reset Module
if [[ -n "${HM_HOST_GPIO_RESET}" ]];  then
	echo ${HM_HOST_GPIO_RESET} > /sys/class/gpio/export
	echo out > /sys/class/gpio/gpio${HM_HOST_GPIO_RESET}/direction
	echo 0 > /sys/class/gpio/gpio${HM_HOST_GPIO_RESET}/value
	sleep 0.1
	echo 1 > /sys/class/gpio/gpio${HM_HOST_GPIO_RESET}/value
	sleep 0.1
	echo in > /sys/class/gpio/gpio${HM_HOST_GPIO_RESET}/direction
fi

#
# Query RF Parameters
#

# Libs for /eq3configcmd
export HM_HOME=$LBPDATA/$PLUGINNAME/occu/arm-gnueabihf/packages-eQ-3/LinuxBasis
export LD_LIBRARY_PATH=$LBPDATA/$PLUGINNAME/occu/arm-gnueabihf/packages-eQ-3/LinuxBasis/lib/:$LBPDATA/$PLUGINNAME/occu/arm-gnueabihf/packages-eQ-3/RFD/lib

# 1. query for HM-MOD-RPI-PCB parameters
if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] ||
   [[ "${HM_HMIP_DEV}" == "HM-MOD-RPI-PCB" ]]; then

	# use eq3configcmd to query for the default rf address and if it is empty
	# or 0x00ffff there is either no HM-MOD-RPI-PCB or it is a RPI-RF-MOD
	RF_ADDRESS=$($HM_HOME/bin/eq3configcmd read-default-rf-address -f ${HM_HOST_GPIO_UART} -h 2>&1 | grep "^0x" | tr -d '[:space:]')
	if [[ -n "${RF_ADDRESS}" ]] && [[ "${RF_ADDRESS}" != "0x00ffff" ]]; then
		RF_SGTIN=$($HM_HOME/bin/eq3configcmd update-coprocessor -p ${HM_HOST_GPIO_UART} -t HM-MOD-UART -c -sg 2>&1 | sed -n 's/.*SGTIN: \([0-9A-Fa-f]\{24\}\).*/\1/p')
		RF_SERIAL=$($HM_HOME/bin/eq3configcmd update-coprocessor -p ${HM_HOST_GPIO_UART} -t HM-MOD-UART -c -se 2>&1 | grep "SerialNumber:" | cut -d' ' -f5 | tr -d '[:space:]')
		RF_VERSION=$($HM_HOME/bin/eq3configcmd update-coprocessor -p ${HM_HOST_GPIO_UART} -t HM-MOD-UART -c -v 2>&1 | grep "Version:" | cut -d' ' -f5 | tr -d '[:space:]')
		HM_HMRF_SERIAL=${RF_SERIAL}
		HM_HMRF_VERSION=${RF_VERSION}
		HM_HMRF_ADDRESS=${RF_ADDRESS}
		HM_HMIP_SERIAL=${RF_SERIAL}
		HM_HMIP_VERSION=${RF_VERSION}
		HM_HMIP_ADDRESS=${RF_ADDRESS}
		HM_HMIP_SGTIN=${RF_SGTIN}

	else
		HM_HMRF_DEV=
		HM_HMRF_SERIAL=
		HM_HMRF_VERSION=
		HM_HMRF_ADDRESS=
		HM_HMIP_DEV=
		HM_HMIP_SERIAL=
		HM_HMIP_VERSION=
		HM_HMIP_ADDRESS=
		HM_HMIP_SGTIN=
	fi
fi

# 2. query for RPI-RF-MOD parameters
if [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]] ||
   [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then

	# use hmip-copro-update only to query all rf module related info (eq3configcmd is not supported for RPI-RF-MOD)
	RF_INFO=$(/usr/bin/java -Dgnu.io.rxtx.SerialPorts=${HM_HOST_GPIO_UART} -jar /opt/HmIP/hmip-copro-update.jar -p ${HM_HOST_GPIO_UART} -v -a 2>&1)
	RF_SGTIN=$(echo ${RF_INFO} | sed -n 's/.*SGTIN = \([0-9A-Fa-f]\{24\}\).*/\1/p')
	RF_VERSION=$(echo ${RF_INFO} | sed -n 's/.*Application version = \([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
	RF_ADDRESS=$(echo ${RF_INFO} | sed -n 's/.*Radio address = \([0-9A-F]\{6\}\).*/0x\1/p')

	if [[ -n "${RF_ADDRESS}" ]] || [[ -n "${RF_SGTIN}" ]]; then
		# use the last 10 chars of the SGTIN as the serial number of the rf module
		RF_SERIAL=$(echo -n ${RF_SGTIN} | tail -c 10)

		if [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]]; then
			HM_HMRF_SERIAL=${RF_SERIAL}
			HM_HMRF_VERSION=${RF_VERSION}
			HM_HMRF_ADDRESS=${RF_ADDRESS}
		fi

		if [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then
			HM_HMIP_SERIAL=${RF_SERIAL}
			HM_HMIP_VERSION=${RF_VERSION}
			HM_HMIP_ADDRESS=${RF_ADDRESS}
			HM_HMIP_SGTIN=${RF_SGTIN}
		fi
	else
			HM_HMRF_DEV=
			HM_HMRF_SERIAL=
			HM_HMRF_VERSION=
			HM_HMRF_ADDRESS=
			HM_HMIP_DEV=
			HM_HMIP_SERIAL=
			HM_HMIP_VERSION=
			HM_HMIP_ADDRESS=
			HM_HMIP_SGTIN=
	fi
fi								

# save all HM_ env variables
set | grep '^HM_' > /var/tmp/hm_env

# What is enabled?
RFDENABLED=$(jq -r '.EnableRFD' REPLACELBPCONFIGDIR/loxmatic.json)
HMIPSERVERENABLED=$(jq -r '.EnableHMIPSERVER' REPLACELBPCONFIGDIR/loxmatic.json)
HM2MQTTENABLED=$(jq -r '.EnableHM2MQTT' REPLACELBPCONFIGDIR/loxmatic.json)

# Should multimacd be started: Needed if RFD or HMIPServer should be started
if [[ "$RFDENABLED" = "true" ]] || [[ "$RFDENABLED" = "1" ]] || [[ "$HMIPSERVERENABLED" = "true" ]] || [[ "$HMIPSERVERENABLED" = "1" ]];  then
	REPLACELBPBINDIR/multimacd.sh > /dev/null 2>&1
fi

# Should RFD be started
if [[ "$RFDENABLED" = "true" ]] || [[ "$RFDENABLED" = "1" ]];  then
	REPLACELBPBINDIR/rfd.sh > /dev/null 2>&1
fi

# Should HM2MQTT be started
if [[ "$HM2MQTTENABLED" = "true" ]] || [[ "$HM2MQTTENABLED" = "1" ]];  then
	sudo -n -u loxberry REPLACELBPBINDIR/hm2mqtt.sh > /dev/null 2>&1
fi

# output some status information
echo -n "BidCos-RF: "
[[ -n "${HM_HMRF_DEV}" ]] && echo -n "${HM_HMRF_DEV}, " || echo -n "none, "
echo -n "HmIP: "
[[ -n "${HM_HMIP_DEV}" ]] && echo -n "${HM_HMIP_DEV}, " || echo -n "none, "
echo "OK"

chown -R loxberry:loxberry REPLACELBPCONFIGDIR
